
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.2.4
  creationTimestamp: null
  name: policies.rapid.k8s.starkandwayne.com
spec:
  group: rapid.k8s.starkandwayne.com
  names:
    kind: Policy
    listKind: PolicyList
    plural: policies
    singular: policy
  scope: Namespaced
  validation:
    openAPIV3Schema:
      description: Policy is the Schema for the policies API
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          description: PolicySpec defines the desired state of Policy
          properties:
            policyfunction:
              description: PolicyFunction describes which PolicyFunction to instantiate,
                and pass parameters.
              properties:
                name:
                  type: string
                params:
                  additionalProperties:
                    type: string
                  type: object
              required:
              - name
              - params
              type: object
            webhooktemplate:
              description: WebhookTemplate describes the published webhook
              properties:
                failurePolicy:
                  description: FailurePolicy defines how unrecognized errors from
                    the admission endpoint are handled - allowed values are Ignore
                    or Fail. Defaults to Ignore.
                  type: string
                namespaceSelector:
                  description: "NamespaceSelector decides whether to run the webhook
                    on an object based on whether the namespace for that object matches
                    the selector. If the object itself is a namespace, the matching
                    is performed on object.metadata.labels. If the object is another
                    cluster scoped resource, it never skips the webhook. \n For example,
                    to run the webhook on any objects whose namespace is not associated
                    with \"runlevel\" of \"0\" or \"1\";  you will set the selector
                    as follows: \"namespaceSelector\": {   \"matchExpressions\": [
                    \    {       \"key\": \"runlevel\",       \"operator\": \"NotIn\",
                    \      \"values\": [         \"0\",         \"1\"       ]     }
                    \  ] } \n If instead you want to only run the webhook on any objects
                    whose namespace is associated with the \"environment\" of \"prod\"
                    or \"staging\"; you will set the selector as follows: \"namespaceSelector\":
                    {   \"matchExpressions\": [     {       \"key\": \"environment\",
                    \      \"operator\": \"In\",       \"values\": [         \"prod\",
                    \        \"staging\"       ]     }   ] } \n See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
                    for more examples of label selectors. \n Default to the empty
                    LabelSelector, which matches everything."
                  properties:
                    matchExpressions:
                      description: matchExpressions is a list of label selector requirements.
                        The requirements are ANDed.
                      items:
                        description: A label selector requirement is a selector that
                          contains values, a key, and an operator that relates the
                          key and values.
                        properties:
                          key:
                            description: key is the label key that the selector applies
                              to.
                            type: string
                          operator:
                            description: operator represents a key's relationship
                              to a set of values. Valid operators are In, NotIn, Exists
                              and DoesNotExist.
                            type: string
                          values:
                            description: values is an array of string values. If the
                              operator is In or NotIn, the values array must be non-empty.
                              If the operator is Exists or DoesNotExist, the values
                              array must be empty. This array is replaced during a
                              strategic merge patch.
                            items:
                              type: string
                            type: array
                        required:
                        - key
                        - operator
                        type: object
                      type: array
                    matchLabels:
                      additionalProperties:
                        type: string
                      description: matchLabels is a map of {key,value} pairs. A single
                        {key,value} in the matchLabels map is equivalent to an element
                        of matchExpressions, whose key field is "key", the operator
                        is "In", and the values array contains only "value". The requirements
                        are ANDed.
                      type: object
                  type: object
                rules:
                  description: Rules is a tuple of Operations and Resources. It is
                    recommended to make sure that all the tuple expansions are valid.
                  items:
                    description: RuleWithOperations is a tuple of Operations and Resources.
                      It is recommended to make sure that all the tuple expansions
                      are valid.
                    properties:
                      apiGroups:
                        description: APIGroups is the API groups the resources belong
                          to. '*' is all groups. If '*' is present, the length of
                          the slice must be one. Required.
                        items:
                          type: string
                        type: array
                      apiVersions:
                        description: APIVersions is the API versions the resources
                          belong to. '*' is all versions. If '*' is present, the length
                          of the slice must be one. Required.
                        items:
                          type: string
                        type: array
                      operations:
                        description: Operations is the operations the admission hook
                          cares about - CREATE, UPDATE, or * for all operations. If
                          '*' is present, the length of the slice must be one. Required.
                        items:
                          type: string
                        type: array
                      resources:
                        description: "Resources is a list of resources this rule applies
                          to. \n For example: 'pods' means pods. 'pods/log' means
                          the log subresource of pods. '*' means all resources, but
                          not subresources. 'pods/*' means all subresources of pods.
                          '*/scale' means all scale subresources. '*/*' means all
                          resources and their subresources. \n If wildcard is present,
                          the validation rule will ensure resources do not overlap
                          with each other. \n Depending on the enclosing object, subresources
                          might not be allowed. Required."
                        items:
                          type: string
                        type: array
                      scope:
                        description: scope specifies the scope of this rule. Valid
                          values are "Cluster", "Namespaced", and "*" "Cluster" means
                          that only cluster-scoped resources will match this rule.
                          Namespace API objects are cluster-scoped. "Namespaced" means
                          that only namespaced resources will match this rule. "*"
                          means that there are no scope restrictions. Subresources
                          match the scope of their parent resource. Default is "*".
                        type: string
                    type: object
                  type: array
              type: object
          required:
          - policyfunction
          - webhooktemplate
          type: object
        status:
          description: PolicyStatus defines the observed state of Policy
          type: object
      type: object
  version: v1beta1
  versions:
  - name: v1beta1
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
